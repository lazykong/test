#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>

// RDP 패킷을 식별하기 위한 함수
int is_rdp_packet(const u_char *packet, int packet_length) {
    // TLSv1.2 패킷의 헤더 크기
    const int tls_header_size = 5;
    // TLSv1.2 프로토콜을 사용하는 경우
    if (packet_length > tls_header_size && packet[0] == 0x16 && packet[1] == 0x03 && packet[2] == 0x03) {
        // RDP 패킷으로 인식할 수 있는 추가적인 특성을 여기에 추가할 수 있습니다.
        return 1;
    }
    return 0;
}

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    const struct ip *ip_header; // IP 헤더
    const struct tcphdr *tcp_header; // TCP 헤더
    int ip_header_length; // IP 헤더 길이

    // IP 헤더로 이동
    ip_header = (struct ip*)(packet);

    // IP 헤더 길이 계산 (IHL 필드는 32비트 워드 단위)
    ip_header_length = ip_header->ip_hl * 4;

    // TCP 패킷인 경우
    if (ip_header->ip_p == IPPROTO_TCP) {
        tcp_header = (struct tcphdr*)((u_char*)ip_header + ip_header_length);

        // RDP 패킷인 경우 (포트 3389)
        if (ntohs(tcp_header->th_dport) == 3389 || ntohs(tcp_header->th_sport) == 3389) {
            // 패킷 길이와 패킷 데이터를 is_rdp_packet 함수로 전달하여 RDP 패킷인지 확인
            if (is_rdp_packet(packet + ip_header_length + sizeof(struct tcphdr), pkthdr->len - ip_header_length - sizeof(struct tcphdr))) {
                printf("RDP Packet Detected\n");
                // 추가적인 RDP 패킷 처리 로직을 추가할 수 있습니다.
                return;
            }
        }
        // SSH 패킷인 경우 (포트 22)
        else if (ntohs(tcp_header->th_dport) == 22 || ntohs(tcp_header->th_sport) == 22) {
            printf("SSH Packet Detected\n");
            // 추가적인 SSH 패킷 처리 로직을 추가할 수 있습니다.
            return;
        }
    }
    // UDP 패킷인 경우
    else if (ip_header->ip_p == IPPROTO_UDP) {
        printf("UDP Packet Detected\n");
        // 추가적인 UDP 패킷 처리 로직을 추가할 수 있습니다.
        return;
    }

    // 다른 유형의 패킷인 경우
    printf("Unknown Packet Type\n");
}

// 메인 함수
int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pcap_file>\n", argv[0]);
        return 1;
    }

    pcap_t *handle; // pcap 핸들
    char errbuf[PCAP_ERRBUF_SIZE]; // 오류 메시지를 저장할 버퍼

    // pcap 파일을 열고 핸들을 가져옵니다.
    handle = pcap_open_offline(argv[1], errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Error opening pcap file: %s\n", errbuf);
        return 1;
    }

    // 패킷을 처리하는 함수를 등록합니다.
    pcap_loop(handle, 0, packet_handler, NULL);

    // pcap 핸들을 닫습니다.
    pcap_close(handle);

    return 0;
}

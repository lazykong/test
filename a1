#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <string.h>

// RDP 패킷을 식별하기 위한 함수
int is_rdp_packet(const struct tcphdr *tcp_header, const u_char *packet_data, int packet_length) {
    // 목적지 포트가 3389인지 확인
    if (ntohs(tcp_header->th_dport) == 3389 || ntohs(tcp_header->th_sport) == 3389) {
        // TLSv1.2 프로토콜을 사용하는지 확인
        if (packet_length > 5 && packet_data[0] == 0x16 && packet_data[1] == 0x03 && packet_data[2] == 0x03) {
            // 추가적인 패턴 검사 로직을 여기에 추가할 수 있습니다.
            return 1; // RDP 패킷으로 판별
        }
    }
    return 0; // RDP 패킷이 아님
}

// SSH 패킷을 식별하기 위한 함수
int is_ssh_packet(const struct tcphdr *tcp_header, const u_char *packet_data, int packet_length) {
    // 목적지 포트가 22인지 확인
    if (ntohs(tcp_header->th_dport) == 22 || ntohs(tcp_header->th_sport) == 22) {
        // SSH 패킷으로 판별
        return 1;
    }
    return 0; // SSH 패킷이 아님
}

// 게임 패킷을 식별하기 위한 함수
int is_game_packet(const struct tcphdr *tcp_header) {
    // 게임 서버와 클라이언트 간의 통신 포트 (예: 27015)
    if (ntohs(tcp_header->th_dport) == 25565 || ntohs(tcp_header->th_sport) == 25565) {
        // 추가적인 패턴 검사 로직을 여기에 추가할 수 있습니다.
        return 1; // 게임 패킷으로 판별
    }
    return 0; // 게임 패킷이 아님
}

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    const struct ip *ip_header; // IP 헤더
    const struct tcphdr *tcp_header; // TCP 헤더
    int ip_header_length; // IP 헤더 길이

    // IP 헤더로 이동
    ip_header = (struct ip*)(packet);

    // IP 헤더 길이 계산 (IHL 필드는 32비트 워드 단위)
    ip_header_length = ip_header->ip_hl * 4;

    // TCP 패킷인 경우
    if (ip_header->ip_p == IPPROTO_TCP) {
        tcp_header = (struct tcphdr*)((u_char*)ip_header + ip_header_length);

        // RDP 패킷인 경우
        if (is_rdp_packet(tcp_header, packet + ip_header_length + sizeof(struct tcphdr), pkthdr->len - ip_header_length - sizeof(struct tcphdr))) {
            printf("RDP Packet Detected\n");
            // 추가적인 RDP 패킷 처리 로직을 여기에 추가할 수 있습니다.
            return;
        }
        // SSH 패킷인 경우
        else if (is_ssh_packet(tcp_header, packet + ip_header_length + sizeof(struct tcphdr), pkthdr->len - ip_header_length - sizeof(struct tcphdr))) {
            printf("SSH Packet Detected\n");
            // 추가적인 SSH 패킷 처리 로직을 여기에 추가할 수 있습니다.
            return;
        }
        // 게임 패킷인 경우
        else if (is_game_packet(tcp_header)) {
            printf("Game Packet Detected\n");
            // 추가적인 게임 패킷 처리 로직을 여기에 추가할 수 있습니다.
            return;
        }
    }

    // 다른 유형의 패킷인 경우
    printf("Unknown Packet Type\n");
}

int main(int argc, char *argv[]) {
    pcap_if_t *alldevsp, *device;
    char errbuf[PCAP_ERRBUF_SIZE], *dev;
    pcap_t *handle;
    struct bpf_program fp;
    char filter_exp[] = "tcp";
    bpf_u_int32 net;

    // 사용할 네트워크 장치 찾기
    if (pcap_findalldevs(&alldevsp, errbuf)) {
        fprintf(stderr, "Error in pcap_findalldevs: %s\n", errbuf);
        exit(1);
    }

    // 첫 번째 네트워크 장치 사용
    device = alldevsp;
    if (device == NULL) {
        fprintf(stderr, "No devices found.\n");
        return 2;
    }
    dev = device->name;

    printf("Using device %s\n", dev);

    // 장치 열기
    handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open device %s: %s\n", dev, errbuf);
        exit(2);
    }

    // 네트워크 디바이스의 네트워크 번호와 마스크 얻기
    if (pcap_lookupnet(dev, &net, &net, errbuf) == -1) {
        fprintf(stderr, "Couldn't get netmask for device %s: %s\n", dev, errbuf);
        net = 0;
    }

    // 필터 표현식 컴파일
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "Couldn't parse filter %s: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 필터 설정
    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "Couldn't install filter %s: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 패킷 캡처 시작 - 무한 루프로 각 패킷마다 packet_handler 콜백 함수 호출
    pcap_loop(handle, 0, packet_handler, NULL);

    // 종료 시 리소스 정리
    pcap_freecode(&fp);
    pcap_close(handle);
    pcap_freealldevs(alldevsp);

    printf("Capture complete.\n");
    return 0;
}

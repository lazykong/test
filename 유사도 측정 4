#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>

// SSH, RDP, 게임, HTTP, 웹 패킷 데이터 (예시)
const u_char ssh_packet_data[] = { /* SSH 패킷 데이터 */ };
const u_char rdp_packet_data[] = { /* RDP 패킷 데이터 */ };
const u_char game_packet_data[] = { /* 게임 패킷 데이터 */ };
const u_char http_packet_data[] = { /* HTTP 패킷 데이터 */ };
const u_char web_packet_data[] = { /* 웹 패킷 데이터 */ };

// 각 패킷 데이터의 크기
const int ssh_packet_size = sizeof(ssh_packet_data);
const int rdp_packet_size = sizeof(rdp_packet_data);
const int game_packet_size = sizeof(game_packet_data);
const int http_packet_size = sizeof(http_packet_data);
const int web_packet_size = sizeof(web_packet_data);

// 패킷 유형 열거형
typedef enum {
    SSH_PACKET,
    RDP_PACKET,
    GAME_PACKET,
    HTTP_PACKET,
    WEB_PACKET,
    UNKNOWN_PACKET
} PacketType;

// 패킷 간 유사도를 계산하는 함수
float calculate_similarity(const u_char *packet1, int length1, const u_char *packet2, int length2) {
    // 패킷 데이터의 내용을 비교하여 유사도를 계산
    int min_length = (length1 < length2) ? length1 : length2;
    int similarity_count = 0;

    // 패킷 데이터의 각 바이트를 비교하며 유사도 측정
    for (int i = 0; i < min_length; i++) {
        if (packet1[i] == packet2[i]) {
            similarity_count++;
        }
    }

    // 유사도 계산
    float similarity = (float)similarity_count / min_length;
    return similarity;
}

// 패킷 유형을 식별하는 함수
PacketType identify_packet_type(const u_char *packet, int length) {
    // 패킷과 사전에 수집한 패킷 데이터를 비교하여 유사도를 계산하고 가장 높은 유사도를 가진 패킷의 유형을 식별
    float similarity_ssh = calculate_similarity(packet, length, ssh_packet_data, ssh_packet_size);
    float similarity_rdp = calculate_similarity(packet, length, rdp_packet_data, rdp_packet_size);
    float similarity_game = calculate_similarity(packet, length, game_packet_data, game_packet_size);
    float similarity_http = calculate_similarity(packet, length, http_packet_data, http_packet_size);
    float similarity_web = calculate_similarity(packet, length, web_packet_data, web_packet_size);

    // 가장 높은 유사도를 가진 패킷 유형을 반환
    float max_similarity = similarity_ssh;
    PacketType max_similarity_packet = SSH_PACKET;

    if (similarity_rdp > max_similarity) {
        max_similarity = similarity_rdp;
        max_similarity_packet = RDP_PACKET;
    }
    if (similarity_game > max_similarity) {
        max_similarity = similarity_game;
        max_similarity_packet = GAME_PACKET;
    }
    if (similarity_http > max_similarity) {
        max_similarity = similarity_http;
        max_similarity_packet = HTTP_PACKET;
    }
    if (similarity_web > max_similarity) {
        max_similarity = similarity_web;
        max_similarity_packet = WEB_PACKET;
    }

    return max_similarity_packet;
}

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    // 이더넷 헤더, IP 헤더, TCP 헤더 포인터
    const struct ether_header *eth_header;
    const struct ip *ip_header;
    const struct tcphdr *tcp_header;
    int ip_header_length, tcp_header_length, payload_length;
    const u_char *payload;

    // 이더넷 헤더 분석
    eth_header = (struct ether_header *)packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {
        ip_header = (struct ip*)(packet + sizeof(struct ether_header));

        // IP 헤더 길이 계산 (IHL 필드는 32비트 워드 단위)
        ip_header_length = ip_header->ip_hl * 4;

        if (ip_header->ip_p == IPPROTO_TCP) {
            tcp_header = (struct tcphdr*)((u_char*)ip_header + ip_header_length);

            // TCP 헤더 길이 계산 (Data Offset 필드는 32비트 워드 단위)
            tcp_header_length = (tcp_header->th_off) * 4;

            // 페이로드 시작 위치 및 길이 계산
            payload = (u_char*)tcp_header + tcp_header_length;
            payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + tcp_header_length);

            // 패킷 유형 식별
            PacketType packet_type = identify_packet_type(payload, payload_length);

            // 필요한 정보 출력
            printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x, Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
                   eth_header->ether_shost[0], eth_header->ether_shost[1], eth_header->ether_shost[2],
                   eth_header->ether_shost[3], eth_header->ether_shost[4], eth_header->ether_shost[5],
                   eth_header->ether_dhost[0], eth_header->ether_dhost[1], eth_header->ether_dhost[2],
                   eth_header->ether_dhost[3], eth_header->ether_dhost[4], eth_header->ether_dhost[5]);

            printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));
            printf("Src Port: %d, Dst Port: %d\n", ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));
            
            // 패킷 유형 출력
            switch (packet_type) {
                case SSH_PACKET:
                    printf("Packet Type: SSH\n");
                    break;
                case RDP_PACKET:
                    printf("Packet Type: RDP\n");
                    break;
                case GAME_PACKET:
                    printf("Packet Type: GAME\n");
                    break;
                case HTTP_PACKET:
                    printf("Packet Type: HTTP\n");
                    break;
                case WEB_PACKET:
                    printf("Packet Type: WEB\n");
                    break;
                case UNKNOWN_PACKET:
                default:
                    printf("Packet Type: Unknown\n");
                    break;
            }

            // 페이로드 출력
            if (payload_length > 0) {
                printf("Payload (%d bytes):\n", payload_length);
                for (int i = 0; i < payload_length; i++) {
                    printf("%02x ", payload[i]);
                    if ((i + 1) % 16 == 0) printf("\n");
                }
                printf("\n");
            } else {
                printf("No Payload\n");
            }
        }
    }
}

int main(int argc, char *argv[]) {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    char filter_exp[] = "tcp";
    bpf_u_int32 net;

    // pcap 파일 경로 확인
    if (argc != 2) {
        fprintf(stderr, "Usage: %s pcap_file\n", argv[0]);
        return 1;
    }

    // pcap 파일 열기
    handle = pcap_open_offline(argv[1], errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Error opening pcap file: %s\n", errbuf);
        return 2;
    }

    // 필터 표현식 컴파일
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "%s 필터 파싱 실패: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 필터 설정
    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "%s 필터 설치 실패: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 패킷 캡처 시작 - 각 패킷에 대해 패킷 핸들러 콜백 함수를 호출하는 무한 루프
    pcap_loop(handle, 0, packet_handler, NULL);

    // 종료 시 리소스 정리
    pcap_freecode(&fp);
    pcap_close(handle);

    printf("캡처 완료.\n");
    return 0;
}

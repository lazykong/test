#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>

// 패킷 간 유사도를 계산하는 함수
float calculate_similarity(const u_char *packet1, int length1, const u_char *packet2, int length2) {
    // 유사도 계산 로직을 구현합니다.
    // 패킷 페이로드, 헤더 필드 등을 비교하는 여러 방법이 가능합니다.
    // 간단하게 패킷 페이로드 길이를 비교하는 방법을 사용하겠습니다.
    float similarity = 0.0;
    if (length1 == length2) {
        similarity = 1.0;
    } else {
        similarity = 0.5; // 간단한 예시로 임의의 값을 지정합니다.
    }
    return similarity;
}

// 패킷 유형을 유추하는 함수
void classify_packet(const u_char *packet, int length) {
    // 유사도를 기반으로 패킷 유형을 분류합니다.
    // 주어진 패킷을 사전에 수집한 패킷 유형과 비교하여 유사도를 계산합니다.
    // 여기서는 SSH, RDP, 게임 패킷 유형을 가정합니다.
    const int SSH_PACKET_LENGTH = 100; // 각 유형의 예시 패킷 길이
    const int RDP_PACKET_LENGTH = 150;
    const int GAME_PACKET_LENGTH = 200;

    float similarity_ssh = calculate_similarity(packet, length, ssh_packet_data, SSH_PACKET_LENGTH);
    float similarity_rdp = calculate_similarity(packet, length, rdp_packet_data, RDP_PACKET_LENGTH);
    float similarity_game = calculate_similarity(packet, length, game_packet_data, GAME_PACKET_LENGTH);

    // 가장 높은 유사도 점수를 기준으로 패킷 유형을 결정합니다.
    if (similarity_ssh > similarity_rdp && similarity_ssh > similarity_game) {
        printf("이 패킷은 SSH 패킷입니다.\n");
    } else if (similarity_rdp > similarity_ssh && similarity_rdp > similarity_game) {
        printf("이 패킷은 RDP 패킷입니다.\n");
    } else if (similarity_game > similarity_ssh && similarity_game > similarity_rdp) {
        printf("이 패킷은 게임 패킷입니다.\n");
    } else {
        printf("패킷 유형을 식별할 수 없습니다.\n");
    }
}

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    // 이더넷, IP, TCP 헤더 포인터
    const struct ether_header *eth_header;
    const struct ip *ip_header;
    const struct tcphdr *tcp_header;
    int ip_header_length;

    // 이더넷 헤더 분석
    eth_header = (struct ether_header *)packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {
        ip_header = (struct ip*)(packet + sizeof(struct ether_header));

        // IP 헤더 길이 계산 (IHL 필드는 32비트 워드 단위)
        ip_header_length = ip_header->ip_hl * 4;

        if (ip_header->ip_p == IPPROTO_TCP) {
            tcp_header = (struct tcphdr*)((u_char*)ip_header + ip_header_length);

            // TCP 헤더 길이 계산 (Data Offset 필드는 32비트 워드 단위)
            int tcp_header_length = (tcp_header->th_off) * 4;

            // 페이로드 시작 위치 및 길이 계산
            const u_char *payload = (u_char*)tcp_header + tcp_header_length;
            int payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + tcp_header_length);

            // 필요한 정보 출력
            printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x, Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
                   eth_header->ether_shost[0], eth_header->ether_shost[1], eth_header->ether_shost[2],
                   eth_header->ether_shost[3], eth_header->ether_shost[4], eth_header->ether_shost[5],
                   eth_header->ether_dhost[0], eth_header->ether_dhost[1], eth_header->ether_dhost[2],
                   eth_header->ether_dhost[3], eth_header->ether_dhost[4], eth_header->ether_dhost[5]);

            printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));
            printf("Src Port: %d, Dst Port: %d\n", ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));

            // 페이로드 출력
            if (payload_length > 0) {
                printf("Payload (%d bytes):\n", payload_length);
                for (int i = 0; i < payload_length; i++) {
                    printf("%02x ", payload[i]);
                    if ((i + 1) % 16 == 0) printf("\n");
                }
                printf("\n");

                // 유사도를 기반으로 패킷 유형 분류
                classify_packet(payload, payload_length);
            } else {
                printf("No Payload\n");
            }
        }
    }
}

int main(int argc, char *argv[]) {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    char filter_exp[] = "tcp";
    bpf_u_int32 net;

    char pcap_file_path[] = "path/to/your/pcap/file.pcapng";
    // pcap 파일 열기
     handle = pcap_open_offline(pcap_file_path, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Error opening pcap file: %s\n", errbuf);
        return 1;
    }

    // 필터 표현식 컴파일
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "%s 필터 파싱 실패: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 필터 설정
    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "%s 필터 설치 실패: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 패킷 캡처 시작 - 각 패킷에 대해 패킷 핸들러 콜백 함수를 호출하는 무한 루프
    pcap_loop(handle, 0, packet_handler, NULL);

    // 종료 시 리소스 정리
    pcap_freecode(&fp);
    pcap_close(handle);

    printf("캡처 완료.\n");
    return 0;
}

#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    const u_char *payload;
    int payload_length;
    const struct ether_header *eth_header;
    const struct ip *ip_header;
    const u_char *payload;
    int ip_header_length;

    // 이더넷 헤더 분석
    eth_header = (struct ether_header *)packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) { 
        ip_header = (struct ip*)(packet + sizeof(struct ether_header));

        // IP 헤더 길이 계산 (IHL 필드는 32비트 워드 단위)
        ip_header_length = ip_header->ip_hl * 4;

        if (ip_header->ip_p == IPPROTO_TCP) {
            const struct tcphdr *tcp_header = (struct tcphdr*)((u_char*)ip_header + ip_header_length);
            int tcp_header_length = tcp_header->th_off * 4;
            payload = (u_char*)tcp_header + tcp_header_length;
            int payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + tcp_header_length);

            // TCP 패킷 분석 함수 호출
            analyze_tcp_packet(eth_header, ip_header, tcp_header, payload, payload_length);
        }   
    }
    // Ethernet 헤더 크기
    int ethernet_header_size = 14;

    // IP 헤더 크기 (IPv4의 경우)
    int ip_header_size = (packet[ethernet_header_size] & 0x0F) * 4;

    // TCP 헤더 크기
    int tcp_header_size = (packet[ethernet_header_size + ip_header_size + 12] >> 4) * 4;

    // 페이로드 시작 위치 계산
    payload = packet + ethernet_header_size + ip_header_size + tcp_header_size;
    // 페이로드 길이 계산
    payload_length = pkthdr->len - (ethernet_header_size + ip_header_size + tcp_header_size);

    // HTTPS 패턴 검색
    if (payload_length >= 12 && memcmp(payload, "\x16\x03", 2) == 0 && memcmp(payload + 5, "\x01", 1) == 0 && memcmp(payload + 9, "\x03", 1) == 0) {
        printf("HTTPS 프로토콜 발견\n");
    }
    // SSH 패턴 검색
    else if (payload_length >= 3 && memcmp(payload, "SSH", 3) == 0) {
        printf("SSH 프로토콜 발견\n");
    }
    // RDP 패턴 검색
    else if (payload_length >= 3 && memcmp(payload, "\x03\x00\x00", 3) == 0) {
        printf("RDP 프로토콜 발견\n");
    }
}

void analyze_tcp_packet(const struct ether_header *eth_header, const struct ip *ip_header, const struct tcphdr *tcp_header, const u_char *payload, int payload_length) {
    printf("----- TCP Packet Analysis -----\n");
    printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x, Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
           eth_header->ether_shost[0], eth_header->ether_shost[1], eth_header->ether_shost[2],
           eth_header->ether_shost[3], eth_header->ether_shost[4], eth_header->ether_shost[5],
           eth_header->ether_dhost[0], eth_header->ether_dhost[1], eth_header->ether_dhost[2],
           eth_header->ether_dhost[3], eth_header->ether_dhost[4], eth_header->ether_dhost[5]);
    printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));
    printf("Src Port: %d, Dst Port: %d\n", ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));

    // 페이로드 출력
    if (payload_length > 0) {
        printf("Payload (%d bytes):\n", payload_length);
        for (int i = 0; i < payload_length; i++) {
            printf("%02x ", payload[i]);
            if ((i + 1) % 16 == 0) printf("\n");
        }
        printf("\n");
    } else {
        printf("No Payload\n");
    }

}

int main(int argc, char *argv[]) {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    char filter_exp[] = "tcp"; // TCP 필터
    bpf_u_int32 net;

    // 명령줄 인자로 pcapng 파일을 받아서 처리
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pcapng file>\n", argv[0]);
        return 1;
    }

    // 파일 열기
    handle = pcap_open_offline(argv[1], errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open file %s: %s\n", argv[1], errbuf);
        return 2;
    }
   
    // 필터 표현식 컴파일
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "Couldn't parse filter %s: %s\n", filter_exp, pcap_geterr(handle));
        return 2;
    }

    // 필터 설정
    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "Couldn't install filter %s: %s\n", filter_exp, pcap_geterr(handle));
        return 2;
    }

    // 패킷 캡처 시작 - 무한 루프로 각 패킷마다 packet_handler 콜백 함수 호출
    pcap_loop(handle, 0, packet_handler, NULL);

    // 종료 시 리소스 정리
    pcap_freecode(&fp);
    pcap_close(handle);

    printf("Analysis complete.\n");
    return 0;
}

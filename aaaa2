#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <string.h>

// TCP 및 UDP 패킷 분석 함수
void analyze_packet(const struct ether_header *eth_header, const struct ip *ip_header, const void *transport_header, const u_char *payload, int payload_length, const char *protocol) {
    printf("----- %s Packet Analysis -----\n", protocol);
    printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x, Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
           eth_header->ether_shost[0], eth_header->ether_shost[1], eth_header->ether_shost[2],
           eth_header->ether_shost[3], eth_header->ether_shost[4], eth_header->ether_shost[5],
           eth_header->ether_dhost[0], eth_header->ether_dhost[1], eth_header->ether_dhost[2],
           eth_header->ether_dhost[3], eth_header->ether_dhost[4], eth_header->ether_dhost[5]);
    printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));

    if (strcmp(protocol, "TCP") == 0) {
        const struct tcphdr *tcp_header = (const struct tcphdr*)transport_header;
        printf("Src Port: %d, Dst Port: %d\n", ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));
    } else if (strcmp(protocol, "UDP") == 0) {
        const struct udphdr *udp_header = (const struct udphdr*)transport_header;
        printf("Src Port: %d, Dst Port: %d\n", ntohs(udp_header->uh_sport), ntohs(udp_header->uh_dport));
    }

    // 페이로드 출력
    if (payload_length > 0) {
        printf("Payload (%d bytes):\n", payload_length);
        for (int i = 0; i < payload_length; i++) {
            printf("%02x ", payload[i]);
            if ((i + 1) % 16 == 0) printf("\n");
        }
        printf("\n");
    } else {
        printf("No Payload\n");
    }
}

// RDP, SSH, HTTPS 패턴 검사 함수
void check_protocol(const u_char *payload, int payload_length) {
    if (payload_length >= 3 && memcmp(payload, "\x03\x00\x00", 3) == 0) {
        printf("RDP 프로토콜 발견\n");
    } else if (payload_length >= 3 && memcmp(payload, "SSH", 3) == 0) {
        printf("SSH 프로토콜 발견\n");
    } else if (payload_length >= 12 && memcmp(payload, "\x16\x03", 2) == 0 && memcmp(payload + 5, "\x01", 1) == 0 && memcmp(payload + 9, "\x03", 1) == 0) {
        printf("HTTPS 프로토콜 발견\n");
    }
}

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    const struct ether_header *eth_header;
    const struct ip *ip_header;
    const u_char *payload;
    int ip_header_length;

    // 이더넷 헤더 분석
    eth_header = (const struct ether_header *)packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {
        ip_header = (const struct ip*)(packet + sizeof(struct ether_header));

        // IP 헤더 길이 계산 (IHL 필드는 32비트 워드 단위)
        ip_header_length = ip_header->ip_hl * 4;

        if (ip_header->ip_p == IPPROTO_TCP) {
            const struct tcphdr *tcp_header = (const struct tcphdr*)((const u_char*)ip_header + ip_header_length);
            int tcp_header_length = tcp_header->th_off * 4;
            payload = (const u_char*)tcp_header + tcp_header_length;
            int payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + tcp_header_length);

            // TCP 패킷 분석 함수 호출
            analyze_packet(eth_header, ip_header, tcp_header, payload, payload_length, "TCP");

            // 프로토콜 검사 함수 호출
            check_protocol(payload, payload_length);
        } else if (ip_header->ip_p == IPPROTO_UDP) {
            const struct udphdr *udp_header = (const struct udphdr*)((const u_char*)ip_header + ip_header_length);
            payload = (const u_char*)udp_header + sizeof(struct udphdr);
            int payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + sizeof(struct udphdr));

            // UDP 패킷 분석 함수 호출
            analyze_packet(eth_header, ip_header, udp_header, payload, payload_length, "UDP");

            // 프로토콜 검사 함수 호출
            check_protocol(payload, payload_length);
        }
    }
}

int main(int argc, char *argv[]) {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];

    // 명령줄 인자로 pcapng 파일을 받아서 처리
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pcapng file>\n", argv[0]);
        return 1;
    }

    // 파일 열기
    handle = pcap_open_offline(argv[1], errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open file %s: %s\n", argv[1], errbuf);
        return 2;
    }

    // 패킷 캡처 시작 - 무한 루프로 각 패킷마다 packet_handler 콜백 함수 호출
    pcap_loop(handle, 0, packet_handler, NULL);

    // 종료 시 리소스 정리
    pcap_close(handle);

    printf("Capture complete.\n");
    return 0;
}

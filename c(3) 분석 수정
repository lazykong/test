#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>

// TCP 패킷 분석 함수
void analyze_tcp_packet(const struct ether_header *eth_header, const struct ip *ip_header, const struct tcphdr *tcp_header, const u_char *payload, int payload_length) {
    printf("----- TCP Packet Analysis -----\n");
    printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x, Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
           eth_header->ether_shost[0], eth_header->ether_shost[1], eth_header->ether_shost[2],
           eth_header->ether_shost[3], eth_header->ether_shost[4], eth_header->ether_shost[5],
           eth_header->ether_dhost[0], eth_header->ether_dhost[1], eth_header->ether_dhost[2],
           eth_header->ether_dhost[3], eth_header->ether_dhost[4], eth_header->ether_dhost[5]);
    printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));
    printf("Src Port: %d, Dst Port: %d\n", ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));

    printf("Source Port (출발지 포트) : %d\n", ntohs(tcp_header->th_sport));
    printf("Destination Port (도착지 포트) : %d\n", ntohs(tcp_header->th_dport));
    printf("Sequence Number (순서번호) : %u\n", ntohl(tcp_header->th_seq));
    printf("Acknowlegment Number (확인응답번호) : %u\n", ntohl(tcp_header->th_ack));
    printf("Header Length (헤더길이) : %d bytes\n", tcp_header->th_off * 4);
    printf("Flags : SYN (동기화)=%d\n", (tcp_header->th_flags & TH_SYN) ? 1 : 0);
    printf("Window (여유공간크기) : %d\n", ntohs(tcp_header->th_win));
    printf("Checksum (체크섬) : 0x%x\n", ntohs(tcp_header->th_sum));
    printf("Urgent Pointer (긴급포인터) : %d\n", ntohs(tcp_header->th_urp));

    // 페이로드 출력
    if (payload_length > 0) {
        printf("Payload (%d bytes):\n", payload_length);
        for (int i = 0; i < payload_length; i++) {
            printf("%02x ", payload[i]);
            if ((i + 1) % 16 == 0) printf("\n");
        }
        printf("\n");
    } else {
        printf("No Payload\n");
    }
}

// UDP 패킷 분석 함수
void analyze_udp_packet(const struct ether_header *eth_header, const struct ip *ip_header, const struct udphdr *udp_header, const u_char *payload, int payload_length) {
    printf("----- UDP Packet Analysis -----\n");
    printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x, Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
           eth_header->ether_shost[0], eth_header->ether_shost[1], eth_header->ether_shost[2],
           eth_header->ether_shost[3], eth_header->ether_shost[4], eth_header->ether_shost[5],
           eth_header->ether_dhost[0], eth_header->ether_dhost[1], eth_header->ether_dhost[2],
           eth_header->ether_dhost[3], eth_header->ether_dhost[4], eth_header->ether_dhost[5]);
    printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));
    printf("Src Port: %d, Dst Port: %d\n", ntohs(udp_header->uh_sport), ntohs(udp_header->uh_dport));

    printf("Source Port (출발지 포트) : %d\n", ntohs(udp_header->uh_sport));
    printf("Destination Port (도착지 포트) : %d\n", ntohs(udp_header->uh_dport));

    // 페이로드 출력
    if (payload_length > 0) {
        printf("Payload (%d bytes):\n", payload_length);
        for (int i = 0; i < payload_length; i++) {
            printf("%02x ", payload[i]);
            if ((i + 1) % 16 == 0) printf("\n");
        }
        printf("\n");
    } else {
        printf("No Payload\n");
    }
}

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    const struct ether_header *eth_header;
    const struct ip *ip_header;
    const u_char *payload;
    int ip_header_length;

    // 이더넷 헤더 분석
    eth_header = (struct ether_header *)packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {
        ip_header = (struct ip*)(packet + sizeof(struct ether_header));

        // IP 헤더 길이 계산 (IHL 필드는 32비트 워드 단위)
        ip_header_length = ip_header->ip_hl * 4;

        if (ip_header->ip_p == IPPROTO_TCP) {
            const struct tcphdr *tcp_header = (struct tcphdr*)((u_char*)ip_header + ip_header_length);
            int tcp_header_length = tcp_header->th_off * 4;
            payload = (u_char*)tcp_header + tcp_header_length;
            int payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + tcp_header_length);

            // TCP 패킷 분석 함수 호출
            analyze_tcp_packet(eth_header, ip_header, tcp_header, payload, payload_length);
        } else if (ip_header->ip_p == IPPROTO_UDP) {
            const struct udphdr *udp_header = (struct udphdr*)((u_char*)ip_header + ip_header_length);
            payload = (u_char*)udp_header + sizeof(struct udphdr);
            int payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + sizeof(struct udphdr));

            // UDP 패킷 분석 함수 호출
            analyze_udp_packet(eth_header, ip_header, udp_header, payload, payload_length);
        }
    }
}

int main() {
    pcap_if_t *alldevsp, *device;
    char errbuf[PCAP_ERRBUF_SIZE], *dev;
    pcap_t *handle;
    struct bpf_program fp;
    char filter_exp[] = "tcp or udp"; // TCP 및 UDP 필터
    bpf_u_int32 net;

    // 사용할 네트워크 장치 찾기
    if (pcap_findalldevs(&alldevsp, errbuf)) {
        fprintf(stderr, "Error in pcap_findalldevs: %s\n", errbuf);
        exit(1);
    }

    // 첫 번째 네트워크 장치 사용
    device = alldevsp;
    if (device == NULL) {
        fprintf(stderr, "No devices found.\n");
        return 2;
    }
    dev = device->name;

    printf("Using device %s\n", dev);

    // 장치 열기
    handle = pcap_open_live(dev, BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open device %s: %s\n", dev, errbuf);
        exit(2);
    }

    // 네트워크 디바이스의 네트워크 번호와 마스크 얻기
    if (pcap_lookupnet(dev, &net, &net, errbuf) == -1) {
        fprintf(stderr, "Couldn't get netmask for device %s: %s\n", dev, errbuf);
        net = 0;
    }

    // 필터 표현식 컴파일
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "Couldn't parse filter %s: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 필터 설정
    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "Couldn't install filter %s: %s\n", filter_exp, pcap_geterr(handle));
        exit(2);
    }

    // 패킷 캡처 시작 - 무한 루프로 각 패킷마다 packet_handler 콜백 함수 호출
    pcap_loop(handle, 0, packet_handler, NULL);

    // 종료 시 리소스 정리
    pcap_freecode(&fp);
    pcap_close(handle);
    pcap_freealldevs(alldevsp);

    printf("Capture complete.\n");
    return 0;
}

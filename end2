#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <string.h>

// HTTP 패킷 페이로드 특징 확인
int is_http_packet(const u_char *payload, int payload_length) {
    const char *http_keywords[] = {"GET ", "POST ", "HTTP/", "Host: "};
    int num_keywords = sizeof(http_keywords) / sizeof(http_keywords[0]);

    // HTTP 페이로드에서 특정 키워드 확인
    for (int i = 0; i < num_keywords; i++) {
        const char *keyword = http_keywords[i];
        if (strstr((const char *)payload, keyword) != NULL) {
            return 1;
        }
    }
    return 0;
}

// SSH 패킷 페이로드 특징 확인
int is_ssh_packet(const u_char *payload, int payload_length) {
    const char *ssh_banner = "SSH-";
    if (strstr((const char *)payload, ssh_banner) != NULL) {
        return 1;
    }
    return 0;
}

// RDP 패킷 페이로드 특징 확인
int is_rdp_packet(const u_char *payload, int payload_length) {
    // RDP 패킷의 특징 확인하기 위한 추가 코드 작성
    return 0;
}

// TCP 패킷 분석 함수
void analyze_tcp_packet(const struct ether_header *eth_header, const struct ip *ip_header, const struct tcphdr *tcp_header, const u_char *payload, int payload_length) {
    printf("----- TCP Packet Analysis -----\n");
    printf("Src MAC: %02x:%02x:%02x:%02x:%02x:%02x, Dst MAC: %02x:%02x:%02x:%02x:%02x:%02x\n",
           eth_header->ether_shost[0], eth_header->ether_shost[1], eth_header->ether_shost[2],
           eth_header->ether_shost[3], eth_header->ether_shost[4], eth_header->ether_shost[5],
           eth_header->ether_dhost[0], eth_header->ether_dhost[1], eth_header->ether_dhost[2],
           eth_header->ether_dhost[3], eth_header->ether_dhost[4], eth_header->ether_dhost[5]);
    printf("Src IP: %s, Dst IP: %s\n", inet_ntoa(ip_header->ip_src), inet_ntoa(ip_header->ip_dst));
    printf("Src Port: %d, Dst Port: %d\n", ntohs(tcp_header->th_sport), ntohs(tcp_header->th_dport));

    // 페이로드 출력
    if (payload_length > 0) {
        printf("Payload (%d bytes):\n", payload_length);
        for (int i = 0; i < payload_length; i++) {
            printf("%02x ", payload[i]);
            if ((i + 1) % 16 == 0) printf("\n");
        }
        printf("\n");
    } else {
        printf("No Payload\n");
    }
}

// 패킷 핸들러 함수
void packet_handler(u_char *user, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    const struct ether_header *eth_header;
    const struct ip *ip_header;
    const struct tcphdr *tcp_header;
    const u_char *payload;
    int ip_header_length;
    int tcp_header_length;
    int payload_length;
    int is_http = 0, is_ssh = 0, is_rdp = 0;

    // 이더넷 헤더 분석
    eth_header = (struct ether_header *)packet;
    if (ntohs(eth_header->ether_type) == ETHERTYPE_IP) {
        // IP 헤더 분석
        ip_header = (struct ip*)(packet + sizeof(struct ether_header));
        ip_header_length = ip_header->ip_hl * 4;

        if (ip_header->ip_p == IPPROTO_TCP) {
            // TCP 헤더 분석
            tcp_header = (struct tcphdr*)(packet + sizeof(struct ether_header) + ip_header_length);
            tcp_header_length = tcp_header->th_off * 4;

            // 페이로드 분석
            payload = packet + sizeof(struct ether_header) + ip_header_length + tcp_header_length;
            payload_length = pkthdr->len - (sizeof(struct ether_header) + ip_header_length + tcp_header_length);

            // SSH, HTTP, RDP 패킷 여부 확인
            is_http = is_http_packet(payload, payload_length);
            is_ssh = is_ssh_packet(payload, payload_length);
            is_rdp = is_rdp_packet(payload, payload_length);

            // 패킷 분류 및 출력
            if (is_http) {
                printf("HTTP Packet\n");
            } else if (is_ssh) {
                printf("SSH Packet\n");
            } else if (is_rdp) {
                printf("RDP Packet\n");
            } else {
                printf("Unknown Protocol Packet\n");
            }
        }
    }
}

int main(int argc, char *argv[]) {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];
    struct bpf_program fp;
    char filter_exp[] = "tcp"; // TCP 필터
    bpf_u_int32 net;

    // 명령줄 인자로 pcapng 파일을 받아서 처리
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pcapng file>\n", argv[0]);
        return 1;
    }

    // 파일 열기
    handle = pcap_open_offline(argv[1], errbuf);
    if (handle == NULL) {
        fprintf(stderr,
